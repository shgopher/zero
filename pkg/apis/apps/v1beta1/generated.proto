// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for 
// this file is https://github.com/superproj/zero.


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.superproj.zero.pkg.apis.apps.v1beta1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/superproj/zero/pkg/apis/apps/v1beta1";

message ObjectReference {
  // Kind of the referent.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  // +optional
  optional string kind = 1;

  // Namespace of the referent.
  // More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  // +optional
  optional string namespace = 2;

  // Name of the referent.
  // More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  // +optional
  optional string name = 3;

  // UID of the referent.
  // More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  // +optional
  optional string uid = 4;

  // API version of the referent.
  // +optional
  optional string apiVersion = 5;

  // Specific resourceVersion to which this reference is made, if any.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  // +optional
  optional string resourceVersion = 6;

  // If referring to a piece of an object instead of an entire object, this string
  // should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
  // For example, if the object reference is to a container within a pod, this would take on a value like:
  // "spec.containers{name}" (where "name" refers to the name of the container that triggered
  // the event) or if no container name is specified "spec.containers[2]" (container with
  // index 2 in this pod). This syntax is chosen only to have some well-defined way of
  // referencing a part of an object.
  // TODO: this design is not final and this field is subject to change in the future.
  // +optional
  optional string fieldPath = 7;
}

// Chain is the Schema for the chains API.
message Chain {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of the chain.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ChainSpec spec = 2;

  // Status is the most recently observed status of the Chain.
  // This data may be out of date by some window of time.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ChainStatus status = 3;
}

// ChainList is a list of Chain objects.
message ChainList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of schema objects.
  repeated Chain items = 2;
}

// ChainSpec defines the desired state of Chain.
message ChainSpec {
  // The display name of the chain.
  // +optional
  optional string displayName = 1;

  // Genesis node machine configuration.
  // +optional
  optional string minerType = 2;

  // Image specify the blockchain node image.
  // +optional
  optional string image = 3;

  // Default bootstrap Zero's Genesis account with 1M TBB tokens.
  // This field is automatic generated by Zero, you should not set this field.
  // +optional
  optional string bootstrapAccount = 4;
}

// ChainStatus defines the observed state of Chain.
message ChainStatus {
  // +optional
  optional LocalObjectReference configMapRef = 1;

  // +optional
  optional LocalObjectReference minerRef = 2;

  // ObservedGeneration is the latest generation observed by the controller.
  // +optional
  optional int64 observedGeneration = 3;

  // Conditions defines the current state of the Chain
  // +optional
  repeated Condition conditions = 4;
}

// ChargeRequest is the Schema for the chargerequests API.
message ChargeRequest {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of the chargerequest.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ChargeRequestSpec spec = 2;

  // Status is the most recently observed status of the ChargeRequest.
  // This data may be out of date by some window of time.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ChargeRequestStatus status = 3;
}

// ChargeRequestList is a list of ChargeRequest objects.
message ChargeRequestList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of schema objects.
  repeated ChargeRequest items = 2;
}

// ChargeRequestSpec defines the desired state of ChargeRequest.
message ChargeRequestSpec {
  // +optional
  optional string from = 1;

  optional string password = 2;
}

// ChargeRequestStatus defines the observed state of ChargeRequest.
message ChargeRequestStatus {
  // +optional
  repeated Condition conditions = 1;
}

// Condition defines an observation of a cloud miner resource operational state.
message Condition {
  // Type of condition in CamelCase or in foo.example.com/CamelCase.
  // Many .condition.type values are consistent across resources like Available, but because arbitrary conditions
  // can be useful (see .node.status.conditions), the ability to deconflict is important.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Severity provides an explicit classification of Reason code, so the users or machines can immediately
  // understand the current situation and act accordingly.
  // The Severity field MUST be set only when Status=False.
  // +optional
  optional string severity = 3;

  // Last time the condition transitioned from one status to another.
  // This should be when the underlying condition changed. If that is not known, then using the time when
  // the API field changed is acceptable.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition in CamelCase.
  // The specific API may choose whether or not this field is considered a guaranteed API.
  // This field may not be empty.
  // +optional
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  // This field may be empty.
  // +optional
  optional string message = 6;
}

// LocalObjectReference contains enough information to let you locate the
// referenced object inside the same namespace.
message LocalObjectReference {
  // Name of the referent.
  // More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  // TODO: Add other useful fields. apiVersion, kind, uid?
  // +optional
  optional string name = 1;
}

// Miner is the Schema for the miners API.
message Miner {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of the miner.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional MinerSpec spec = 2;

  // Most recently observed status of the miner.
  // This data may not be up to date.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional MinerStatus status = 3;
}

// MinerAddress contains information for the miner's address.
message MinerAddress {
  // Miner address type, one of Hostname, ExternalIP or InternalIP.
  optional string type = 1;

  // The machine address.
  optional string address = 2;
}

// MinerList is a list of Miner objects.
message MinerList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of schema objects.
  repeated Miner items = 2;
}

// MinerSet ensures that a specified number of miners replicas are running at any given time.
message MinerSet {
  // If the Labels of a MinerSet are empty, they are defaulted to
  // be the same as the Miner(s) that the MinerSet manages.
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the specification of the desired behavior of the MinerSet.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional MinerSetSpec spec = 2;

  // Status is the most recently observed status of the MinerSet.
  // This data may be out of date by some window of time.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional MinerSetStatus status = 3;
}

// MinerSetList contains a list of MinerSet.
message MinerSetList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of MinerSets.
  repeated MinerSet items = 2;
}

// MinerSetSpec defines the desired state of MinerSet.
message MinerSetSpec {
  // Replicas is the number of desired replicas.
  // This is a pointer to distinguish between explicit zero and unspecified.
  // Defaults to 1.
  // More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
  // +optional
  optional int32 replicas = 1;

  // Selector is a label query over miners that should match the replica count.
  // Label keys and values that must match in order to be controlled by this MinerSet.
  // It must match the miner template's labels.
  // More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 2;

  // Template is the object that describes the miner that will be created if
  // insufficient replicas are detected.
  // +optional
  optional MinerTemplateSpec template = 3;

  // The display name of the minerset.
  optional string displayName = 4;

  // DeletePolicy defines the policy used to identify miners to delete when downscaling.
  // Defaults to "Random". Valid values are "Random, "Newest", "Oldest"
  // +kubebuilder:validation:Enum=Random;Newest;Oldest
  // +optional
  optional string deletePolicy = 5;

  // Minimum number of seconds for which a newly created miner should be ready
  // without any of its component crashing, for it to be considered available.
  // Defaults to 0 (miner will be considered available as soon as it is ready)
  // +optional
  optional int32 minReadySeconds = 6;

  // The maximum time in seconds for a minerset to make progress before it
  // is considered to be failed. The deployment controller will continue to
  // process failed deployments and a condition with a ProgressDeadlineExceeded
  // reason will be surfaced in the deployment status. Note that progress will
  // not be estimated during the time a deployment is paused. Defaults to 600s.
  optional int32 progressDeadlineSeconds = 7;
}

// MinerSetStatus represents the current status of a MinerSet.
message MinerSetStatus {
  // Replicas is the most recently observed number of replicas.
  optional int32 replicas = 1;

  // The number of miners that have labels matching the labels of the miner template of the minerset.
  // +optional
  optional int32 fullyLabeledReplicas = 2;

  // readyReplicas is the number of miners targeted by this MinerSet with a Ready Condition.
  // +optional
  optional int32 readyReplicas = 3;

  // The number of available replicas (ready for at least minReadySeconds) for this minerset.
  // +optional
  optional int32 availableReplicas = 4;

  // ObservedGeneration reflects the generation of the most recently observed MinerSet.
  // +optional
  optional int64 observedGeneration = 5;

  // In the event that there is a terminal problem reconciling the
  // replicas, both FailureReason and FailureMessage will be set. FailureReason
  // will be populated with a succinct value suitable for miner
  // interpretation, while FailureMessage will contain a more verbose
  // string suitable for logging and human consumption.
  //
  // These fields should not be set for transitive errors that a
  // controller faces that are expected to be fixed automatically over
  // time (like service outages), but instead indicate that something is
  // fundamentally wrong with the MinerTemplate's spec or the configuration of
  // the miner controller, and that manual intervention is required. Examples
  // of terminal errors would be invalid combinations of settings in the
  // spec, values that are unsupported by the miner controller, or the
  // responsible miner controller itself being critically misconfigured.
  //
  // Any transient errors that occur during the reconciliation of Miners
  // can be added as events to the MinerSet object and/or logged in the
  // controller's output.
  // +optional
  optional string failureReason = 6;

  // FailureMessage will be set in the event that there is a terminal problem
  // reconciling the MinerSet and will contain a more verbose string suitable
  // for logging and human consumption.
  //
  // This field should not be set for transitive errors that a controller
  // faces that are expected to be fixed automatically over
  // time (like service outages), but instead indicate that something is
  // fundamentally wrong with the MinerSet's spec or the configuration of
  // the controller, and that manual intervention is required. Examples
  // of terminal errors would be invalid combinations of settings in the
  // spec, values that are unsupported by the controller, or the
  // responsible controller itself being critically misconfigured.
  //
  // Any transient errors that occur during the reconciliation of MinerSets
  // can be added as events to the MinerSet object and/or logged in the
  // controller's output.
  // +optional
  optional string failureMessage = 7;

  // Represents the latest available observations of a miner set's current state.
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated Condition conditions = 8;
}

// MinerSpec defines the desired state of Miner.
message MinerSpec {
  // ObjectMeta will autopopulate the Pod created. Use this to
  // indicate what labels, annotations, name prefix, etc., should be used
  // when creating the Pod.
  // +optional
  optional ObjectMeta metadata = 1;

  // The display name of the miner.
  // +optional
  optional string displayName = 2;

  // Miner machine configuration.
  // +optional
  optional string minerType = 3;

  // +optional
  optional string chainName = 6;

  // Restart policy for the miner.
  // One of Always, OnFailure, Never.
  // Default to Always.
  // +optional
  optional string restartPolicy = 7;

  // PodDeletionTimeout defines how long the controller will attempt to delete the Pod that the Machine
  // hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.
  // Defaults to 10 seconds.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration podDeletionTimeout = 8;
}

// MinerStatus defines the observed state of Miner.
message MinerStatus {
  // PodRef will point to the corresponding Pod if it exists.
  // +optional
  optional ObjectReference podRef = 1;

  // LastUpdated identifies when this status was last observed.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 2;

  // FailureReason will be set in the event that there is a terminal problem
  // reconciling the Miner and will contain a succinct value suitable
  // for miner interpretation.
  //
  // This field should not be set for transitive errors that a controller
  // faces that are expected to be fixed automatically over
  // time (like service outages), but instead indicate that something is
  // fundamentally wrong with the Miner's spec or the configuration of
  // the controller, and that manual intervention is required. Examples
  // of terminal errors would be invalid combinations of settings in the
  // spec, values that are unsupported by the controller, or the
  // responsible controller itself being critically misconfigured.
  //
  // Any transient errors that occur during the reconciliation of Miners
  // can be added as events to the Miner object and/or logged in the
  // controller's output.
  // +optional
  optional string failureReason = 3;

  // FailureMessage will be set in the event that there is a terminal problem
  // reconciling the Miner and will contain a more verbose string suitable
  // for logging and human consumption.
  //
  // This field should not be set for transitive errors that a controller
  // faces that are expected to be fixed automatically over
  // time (like service outages), but instead indicate that something is
  // fundamentally wrong with the Miner's spec or the configuration of
  // the controller, and that manual intervention is required. Examples
  // of terminal errors would be invalid combinations of settings in the
  // spec, values that are unsupported by the controller, or the
  // responsible controller itself being critically misconfigured.
  //
  // Any transient errors that occur during the reconciliation of Miners
  // can be added as events to the Miner object and/or logged in the
  // controller's output.
  // +optional
  optional string failureMessage = 4;

  // Addresses is a list of addresses assigned to the miner. Queried from kind cluster, if available.
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated MinerAddress addresses = 5;

  // Phase represents the current phase of miner actuation.
  // One of: Failed, Provisioning, Provisioned, Running, Deleting
  // This field is maintained by miner controller.
  // +optional
  optional string phase = 6;

  // ObservedGeneration is the latest generation observed by the controller.
  // +optional
  optional int64 observedGeneration = 7;

  // Conditions defines the current state of the Miner
  // +optional
  repeated Condition conditions = 8;
}

// MinerTemplateSpec describes the data needed to create a Miner from a template.
message MinerTemplateSpec {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional ObjectMeta metadata = 1;

  // Specification of the desired behavior of the miner.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional MinerSpec spec = 2;
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects
// users must create. This is a copy of customizable fields from metav1.ObjectMeta.
//
// ObjectMeta is embedded in `Miner.Spec` and `MinerSet.Template`,
// which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases
// and read-only fields which end up in the generated CRD validation, having it as a subset simplifies
// the API and some issues that can impact user experience.
//
// During the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054)
// for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs,
// specifically `spec.metadata.creationTimestamp in body must be of type string: "null"`.
// The investigation showed that `controller-tools@v2` behaves differently than its previous version
// when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package.
//
// In more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta`
// had validation properties, including for `creationTimestamp` (metav1.Time).
// The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null`
// which breaks validation because the field isn't marked as nullable.
//
// In future versions, controller-tools@v2 might allow overriding the type and validation for embedded
// types. When that happens, this hack should be revisited.
message ObjectMeta {
  // Map of string keys and values that can be used to organize and categorize
  // (scope and select) objects. May match selectors of replication controllers
  // and services.
  // More info: http://kubernetes.io/docs/user-guide/labels
  // +optional
  map<string, string> labels = 1;

  // Annotations is an unstructured key value map stored with a resource that may be
  // set by external tools to store and retrieve arbitrary metadata. They are not
  // queryable and should be preserved when modifying objects.
  // More info: http://kubernetes.io/docs/user-guide/annotations
  // +optional
  map<string, string> annotations = 2;
}

// PodInfo is a set of ids/uuids to uniquely identify the pod.
message PodInfo {
  // The Operating System reported by the pod
  optional string operatingSystem = 9;

  // The Architecture reported by the  pod
  optional string architecture = 10;
}

