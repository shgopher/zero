// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/superproj/zero.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: gateway/v1/gateway.proto

package v1

import (
	context "context"
	v1beta1 "github.com/superproj/zero/pkg/apis/apps/v1beta1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_GetIdempotentToken_FullMethodName = "/gateway.v1.Gateway/GetIdempotentToken"
	Gateway_CreateMinerSet_FullMethodName     = "/gateway.v1.Gateway/CreateMinerSet"
	Gateway_ListMinerSet_FullMethodName       = "/gateway.v1.Gateway/ListMinerSet"
	Gateway_GetMinerSet_FullMethodName        = "/gateway.v1.Gateway/GetMinerSet"
	Gateway_UpdateMinerSet_FullMethodName     = "/gateway.v1.Gateway/UpdateMinerSet"
	Gateway_DeleteMinerSet_FullMethodName     = "/gateway.v1.Gateway/DeleteMinerSet"
	Gateway_ScaleMinerSet_FullMethodName      = "/gateway.v1.Gateway/ScaleMinerSet"
	Gateway_CreateMiner_FullMethodName        = "/gateway.v1.Gateway/CreateMiner"
	Gateway_ListMiner_FullMethodName          = "/gateway.v1.Gateway/ListMiner"
	Gateway_GetMiner_FullMethodName           = "/gateway.v1.Gateway/GetMiner"
	Gateway_UpdateMiner_FullMethodName        = "/gateway.v1.Gateway/UpdateMiner"
	Gateway_DeleteMiner_FullMethodName        = "/gateway.v1.Gateway/DeleteMiner"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// GetIdempotentToken
	GetIdempotentToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IdempotentResponse, error)
	// CreateMinerSet
	CreateMinerSet(ctx context.Context, in *v1beta1.MinerSet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListMinerSet
	ListMinerSet(ctx context.Context, in *ListMinerSetRequest, opts ...grpc.CallOption) (*ListMinerSetResponse, error)
	// GetMinerSet
	GetMinerSet(ctx context.Context, in *GetMinerSetRequest, opts ...grpc.CallOption) (*v1beta1.MinerSet, error)
	// UpdateMinerSet
	UpdateMinerSet(ctx context.Context, in *v1beta1.MinerSet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteMinerSet
	DeleteMinerSet(ctx context.Context, in *DeleteMinerSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ScaleMinerSet
	ScaleMinerSet(ctx context.Context, in *ScaleMinerSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateMiner
	CreateMiner(ctx context.Context, in *v1beta1.Miner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListMiner
	ListMiner(ctx context.Context, in *ListMinerRequest, opts ...grpc.CallOption) (*ListMinerResponse, error)
	// GetMiner
	GetMiner(ctx context.Context, in *GetMinerRequest, opts ...grpc.CallOption) (*v1beta1.Miner, error)
	// UpdateMiner
	UpdateMiner(ctx context.Context, in *v1beta1.Miner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteMiner
	DeleteMiner(ctx context.Context, in *DeleteMinerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetIdempotentToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IdempotentResponse, error) {
	out := new(IdempotentResponse)
	err := c.cc.Invoke(ctx, Gateway_GetIdempotentToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateMinerSet(ctx context.Context, in *v1beta1.MinerSet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gateway_CreateMinerSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListMinerSet(ctx context.Context, in *ListMinerSetRequest, opts ...grpc.CallOption) (*ListMinerSetResponse, error) {
	out := new(ListMinerSetResponse)
	err := c.cc.Invoke(ctx, Gateway_ListMinerSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMinerSet(ctx context.Context, in *GetMinerSetRequest, opts ...grpc.CallOption) (*v1beta1.MinerSet, error) {
	out := new(v1beta1.MinerSet)
	err := c.cc.Invoke(ctx, Gateway_GetMinerSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateMinerSet(ctx context.Context, in *v1beta1.MinerSet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gateway_UpdateMinerSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteMinerSet(ctx context.Context, in *DeleteMinerSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gateway_DeleteMinerSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ScaleMinerSet(ctx context.Context, in *ScaleMinerSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gateway_ScaleMinerSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateMiner(ctx context.Context, in *v1beta1.Miner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gateway_CreateMiner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListMiner(ctx context.Context, in *ListMinerRequest, opts ...grpc.CallOption) (*ListMinerResponse, error) {
	out := new(ListMinerResponse)
	err := c.cc.Invoke(ctx, Gateway_ListMiner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMiner(ctx context.Context, in *GetMinerRequest, opts ...grpc.CallOption) (*v1beta1.Miner, error) {
	out := new(v1beta1.Miner)
	err := c.cc.Invoke(ctx, Gateway_GetMiner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateMiner(ctx context.Context, in *v1beta1.Miner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gateway_UpdateMiner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteMiner(ctx context.Context, in *DeleteMinerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gateway_DeleteMiner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	// GetIdempotentToken
	GetIdempotentToken(context.Context, *emptypb.Empty) (*IdempotentResponse, error)
	// CreateMinerSet
	CreateMinerSet(context.Context, *v1beta1.MinerSet) (*emptypb.Empty, error)
	// ListMinerSet
	ListMinerSet(context.Context, *ListMinerSetRequest) (*ListMinerSetResponse, error)
	// GetMinerSet
	GetMinerSet(context.Context, *GetMinerSetRequest) (*v1beta1.MinerSet, error)
	// UpdateMinerSet
	UpdateMinerSet(context.Context, *v1beta1.MinerSet) (*emptypb.Empty, error)
	// DeleteMinerSet
	DeleteMinerSet(context.Context, *DeleteMinerSetRequest) (*emptypb.Empty, error)
	// ScaleMinerSet
	ScaleMinerSet(context.Context, *ScaleMinerSetRequest) (*emptypb.Empty, error)
	// CreateMiner
	CreateMiner(context.Context, *v1beta1.Miner) (*emptypb.Empty, error)
	// ListMiner
	ListMiner(context.Context, *ListMinerRequest) (*ListMinerResponse, error)
	// GetMiner
	GetMiner(context.Context, *GetMinerRequest) (*v1beta1.Miner, error)
	// UpdateMiner
	UpdateMiner(context.Context, *v1beta1.Miner) (*emptypb.Empty, error)
	// DeleteMiner
	DeleteMiner(context.Context, *DeleteMinerRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetIdempotentToken(context.Context, *emptypb.Empty) (*IdempotentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdempotentToken not implemented")
}
func (UnimplementedGatewayServer) CreateMinerSet(context.Context, *v1beta1.MinerSet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMinerSet not implemented")
}
func (UnimplementedGatewayServer) ListMinerSet(context.Context, *ListMinerSetRequest) (*ListMinerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMinerSet not implemented")
}
func (UnimplementedGatewayServer) GetMinerSet(context.Context, *GetMinerSetRequest) (*v1beta1.MinerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinerSet not implemented")
}
func (UnimplementedGatewayServer) UpdateMinerSet(context.Context, *v1beta1.MinerSet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMinerSet not implemented")
}
func (UnimplementedGatewayServer) DeleteMinerSet(context.Context, *DeleteMinerSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMinerSet not implemented")
}
func (UnimplementedGatewayServer) ScaleMinerSet(context.Context, *ScaleMinerSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleMinerSet not implemented")
}
func (UnimplementedGatewayServer) CreateMiner(context.Context, *v1beta1.Miner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMiner not implemented")
}
func (UnimplementedGatewayServer) ListMiner(context.Context, *ListMinerRequest) (*ListMinerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMiner not implemented")
}
func (UnimplementedGatewayServer) GetMiner(context.Context, *GetMinerRequest) (*v1beta1.Miner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiner not implemented")
}
func (UnimplementedGatewayServer) UpdateMiner(context.Context, *v1beta1.Miner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMiner not implemented")
}
func (UnimplementedGatewayServer) DeleteMiner(context.Context, *DeleteMinerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMiner not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetIdempotentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetIdempotentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetIdempotentToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetIdempotentToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateMinerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta1.MinerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateMinerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateMinerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateMinerSet(ctx, req.(*v1beta1.MinerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListMinerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMinerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListMinerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ListMinerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListMinerSet(ctx, req.(*ListMinerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMinerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMinerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMinerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetMinerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMinerSet(ctx, req.(*GetMinerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateMinerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta1.MinerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateMinerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateMinerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateMinerSet(ctx, req.(*v1beta1.MinerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteMinerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMinerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteMinerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteMinerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteMinerSet(ctx, req.(*DeleteMinerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ScaleMinerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleMinerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ScaleMinerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ScaleMinerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ScaleMinerSet(ctx, req.(*ScaleMinerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta1.Miner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateMiner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateMiner(ctx, req.(*v1beta1.Miner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ListMiner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListMiner(ctx, req.(*ListMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetMiner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMiner(ctx, req.(*GetMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta1.Miner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateMiner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateMiner(ctx, req.(*v1beta1.Miner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteMiner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteMiner(ctx, req.(*DeleteMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIdempotentToken",
			Handler:    _Gateway_GetIdempotentToken_Handler,
		},
		{
			MethodName: "CreateMinerSet",
			Handler:    _Gateway_CreateMinerSet_Handler,
		},
		{
			MethodName: "ListMinerSet",
			Handler:    _Gateway_ListMinerSet_Handler,
		},
		{
			MethodName: "GetMinerSet",
			Handler:    _Gateway_GetMinerSet_Handler,
		},
		{
			MethodName: "UpdateMinerSet",
			Handler:    _Gateway_UpdateMinerSet_Handler,
		},
		{
			MethodName: "DeleteMinerSet",
			Handler:    _Gateway_DeleteMinerSet_Handler,
		},
		{
			MethodName: "ScaleMinerSet",
			Handler:    _Gateway_ScaleMinerSet_Handler,
		},
		{
			MethodName: "CreateMiner",
			Handler:    _Gateway_CreateMiner_Handler,
		},
		{
			MethodName: "ListMiner",
			Handler:    _Gateway_ListMiner_Handler,
		},
		{
			MethodName: "GetMiner",
			Handler:    _Gateway_GetMiner_Handler,
		},
		{
			MethodName: "UpdateMiner",
			Handler:    _Gateway_UpdateMiner_Handler,
		},
		{
			MethodName: "DeleteMiner",
			Handler:    _Gateway_DeleteMiner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/v1/gateway.proto",
}
