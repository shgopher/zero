# ==============================================================================
# Makefile helper functions for generate necessary files
#

.PHONY: gen.run
gen.run: gen.docs gen.helm-docs gen.protoc go.generate ## Generate all necessary files except for files generated by `generated.files`.

.PHONY: gen.docgo.doc
gen.docgo.doc: ## Generate missing doc.go for go packages.
	@echo "===========> Generating missing doc.go for go packages"
	@${ZROOT}/scripts/gen-doc.sh

.PHONY: gen.docgo.check
gen.docgo.check: gen.docgo.doc ## Check missing doc.go for go packages.
	@n="$$(git ls-files --others '*/doc.go' | wc -l)"; \
	if test "$$n" -gt 0; then \
		git ls-files --others '*/doc.go' | sed -e 's/^/  /'; \
		echo "$@: untracked doc.go file(s) exist in working directory" >&2 ; \
		false ; \
	fi

.PHONY: gen.docs
gen.docs: ## Update generated swagger docs.
	@${ZROOT}/scripts/update-generated-swagger-docs.sh

.PHONY: gen.appdocs
gen.appdocs: ## Update generated application docs.
	@${ZROOT}/scripts/update-generated-docs.sh

.PHONY: gen.helm-docs
gen.helm-docs: tools.verify.helm-docs ## Generate documentation for helm charts.
	@echo "===========> Generating documentation for helm charts"
	@helm-docs --log-level=warning --chart-search-root $(ZROOT)

.PHONY: gen.ca.%
gen.ca.%: ## Generate CA files.
	$(eval CA := $(word 1,$(subst ., ,$*)))
	@echo "===========> Generating CA files for $(CA)"
	@${ZROOT}/scripts/gen-certs.sh generate-node-cert $(OUTPUT_DIR)/cert $(CA)

.PHONY: gen.ca
gen.ca: $(addprefix gen.ca., $(CERTIFICATES)) ## Generate all CA files.

.PHONY: gen.kubeconfig
gen.kubeconfig: gen.ca ## Generate kubeconfig files.
	@$(ZROOT)/scripts/gen-kubeconfig.sh $(OUTPUT_DIR)/cert/ca.pem $(OUTPUT_DIR)/cert/admin.pem $(OUTPUT_DIR)/cert/admin-key.pem > $(OUTPUT_DIR)/config
	@echo "Generated at: $(OUTPUT_DIR)/config"

.PHONY: gen.protoc
gen.protoc: ## Generate go source files from protobuf files.
	@protoc \
	       --proto_path=$(APIROOT) \
	       --proto_path=$(APISROOT) \
	       --proto_path=$(ZROOT)/third_party \
 	       --go_out=paths=source_relative:$(APIROOT) \
 	       --go-http_out=paths=source_relative:$(APIROOT) \
 	       --go-grpc_out=paths=source_relative:$(APIROOT) \
 	       --go-errors_out=paths=source_relative:$(APIROOT) \
				 --validate_out=paths=source_relative,lang=go:$(APIROOT) \
	       --openapi_out=fq_schema_naming=true,default_response=false:$(ZROOT)/api/openapi \
	       --openapiv2_out=$(ZROOT)/api/openapi \
	       --openapiv2_opt=logtostderr=true \
	       --openapiv2_opt=json_names_for_fields=false \
				 $(shell find $(APIROOT) -name *.proto)

.PHONY: gen.apisprotobuf
gen.apisprotobuf: ## Generate protobuf files from structs.
	@$(ZROOT)/scripts/verify-generated-protobuf.sh

.PHONY: go.generate
go.generate: ## Run `go generate ./...` command.
	@$(GO) generate $(ZROOT)/...
